AWSTemplateFormatVersion: 2010-09-09
Description: CloudFormation template for s3 bucket 

Parameters:
  InputBucketName:
    Type: String
    Default: as98-inp-batch-files
  OutputBucketName:
    Type: String
    Default: as98-tar-batch-files
  LoggingBucketName:
    Type: String
    Default: as98-log-batch-files
  LambdaFunctionName:
    Type: String
    Description: The name of the Lambda function to be deployed
    Default: as98-glue-job-Trigger
  LambdaRoleName:
    Type: String
    Description: The name of the IAM role used as the Lambda execution role
    Default: as98-affinity_forum
  LambdaPolicyName:
    Type: String
    Default: as98-lambda-policy-glueexecution

Resources:
  # S3 Bucket - source bucket, logging bucket and output bucket
  InputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref InputBucketName

  OutputBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref OutputBucketName

  LoggingBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: !Ref LoggingBucketName

  # bucket policy to enable CloudTrail to write to the logging bucket
  BucketPolicy:
    Type: AWS::S3::BucketPolicy
    Properties:
      Bucket: !Ref LoggingBucket
      PolicyDocument:
        Version: 2012-10-17
        Statement:
          - Sid: AWSCloudTrailAclCheck
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:GetBucketAcl
            Resource: !GetAtt LoggingBucket.Arn
          - Sid: AWSCloudTrailWrite
            Effect: Allow
            Principal:
              Service: cloudtrail.amazonaws.com
            Action: s3:PutObject
            Resource: !Sub ${LoggingBucket.Arn}/AWSLogs/${AWS::AccountId}/*
            Condition:
              StringEquals:
                s3:x-amz-acl: bucket-owner-full-control

  # use the LoggingBucketName as the trail name
  myTrail:
    Type: AWS::CloudTrail::Trail
    DependsOn: BucketPolicy
    Properties:
      TrailName: !Ref LoggingBucketName
      S3BucketName: !Ref LoggingBucket
      IsLogging: true
      IsMultiRegionTrail: false
      EventSelectors:
        - IncludeManagementEvents: false
          DataResources:
            - Type: AWS::S3::Object
              Values:
                - !Sub ${InputBucket.Arn}/
      IncludeGlobalServiceEvents: false

  # EventBridge rule . TODO : Invoke Lambda
  LambdaRole:
    Type: AWS::IAM::Role
    Properties:
      RoleName: !Ref LambdaRoleName
      Description: An execution role for a Lambda function launched by CloudFormation
      ManagedPolicyArns:
        - !Ref LambdaPolicy
        - arn:aws:iam::aws:policy/service-role/AWSLambdaBasicExecutionRole
        - arn:aws:iam::aws:policy/service-role/AWSGlueServiceRole
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service: lambda.amazonaws.com
          Action:
          - 'sts:AssumeRole'

      
  LambdaPolicy:
    Type: AWS::IAM::ManagedPolicy
    Properties:
      ManagedPolicyName: !Ref LambdaPolicyName
      Description: Managed policy for a Lambda function launched by CloudFormation
      PolicyDocument:
        Version: '2012-10-17'
        Statement:
          - Effect: Allow
            Action:
              - 'glue:*'
              - 's3:GetBucketLocation'
              - 's3:ListBucket'
              - 's3:ListAllMyBuckets'
              - 's3:GetBucketAcl'
              - 'iam:GetRole'
              - 'iam:GetRolePolicy'
              - 'cloudwatch:PutMetricData'
              - 'sqs:ReceiveMessage'
              - 'sqs:DeleteMessage'
              - 'sqs:GetQueueAttributes'
            Resource: !Join ['',['arn:', !Ref AWS::Partition, ':logs:', !Ref AWS::Region, ':', !Ref AWS::AccountId, ':log-group:/aws/lambda/', !Ref LambdaFunctionName, ':*']]
            
  LambdaFunction:
    Type: AWS::Lambda::Function
    Properties:
      Description: Adds a basic lambda function
      FunctionName: !Ref LambdaFunctionName
      Handler: index.lambda_handler
      MemorySize: 128
      Runtime: python3.8
      Role: !GetAtt 'LambdaRole.Arn'
      Timeout: 240
      Code:
        ZipFile: |
            # Set up logging
            import json
            import os
            import logging
            logger = logging.getLogger()
            logger.setLevel(logging.INFO)

            # Import Boto 3 for AWS Glue
            import boto3
            client = boto3.client('glue')

            # Variables for the job: 
            glueJobName = "GlueTransform"

            # Define Lambda function
            def lambda_handler(event, context):
                logger.info('## INITIATED BY EVENT: ')
                logger.info(event['detail'])
                response = client.start_job_run(JobName = glueJobName)
                logger.info('## STARTED GLUE JOB: ' + glueJobName)
                logger.info('## GLUE JOB RUN ID: ' + response['JobRunId'])
                return response

  EventRule:
    Type: AWS::Events::Rule
    Properties:
      Description: EventRule
      State: ENABLED
      EventPattern:
        source:
          - aws.s3
        detail:
          eventName:
            - PutObject
          requestParameters:
            bucketName:
              - !Ref InputBucket
      Targets:
        - Arn: !GetAtt 
            - "FileQueue"
            - "Arn"
          Id: "SQSQueueTestV1"
  PermissionForEventsToInvokeLambda: 
     Type: AWS::Lambda::Permission
     Properties: 
        FunctionName: 
          Ref: "LambdaFunction"
        Action: "lambda:InvokeFunction"
        Principal: "events.amazonaws.com"
        SourceArn: 
          Fn::GetAtt: 
            - "EventRule"
            - "Arn"

  FileQueue: 
    Type: AWS::SQS::Queue
    Properties: 
      VisibilityTimeout: 300
      RedrivePolicy: 
        deadLetterTargetArn: !Sub ${DeadLetterQueue.Arn}
        maxReceiveCount: 10
  
  DeadLetterQueue: 
    Type: AWS::SQS::Queue
    
  LambdaSourceMapping:
    Type: 'AWS::Lambda::EventSourceMapping'
    DependsOn:
      - FileQueue
      - LambdaFunction
    Properties:
      BatchSize: 1 # maximum number of items to retrieve in a single batch
      Enabled: true
      EventSourceArn: !GetAtt 'FileQueue.Arn'
      FunctionName: !GetAtt 'LambdaFunction.Arn'
      
  SampleSQSPolicy: 
    Type: AWS::SQS::QueuePolicy
    Properties: 
      Queues: 
        - !Ref FileQueue
      PolicyDocument: 
        Statement: 
          - Action: 
              - 'sqs:ReceiveMessage'
              - 'sqs:DeleteMessage'
              - 'sqs:GetQueueAttributes'
              - 'sqs:SendMessage'
            Effect: "Allow"
            Resource: !GetAtt 'EventRule.Arn'
            Principal:
              Service:
                - "events.amazonaws.com"
  # Allow EventBridge to invoke SQS
  EventBridgeToToSqsPolicy:
    Type: AWS::SQS::QueuePolicy
    Properties:
      PolicyDocument:
        Statement:
        - Effect: Allow
          Principal:
            Service: events.amazonaws.com
          Action: SQS:SendMessage
          Resource:  !GetAtt FileQueue.Arn
      Queues:
        - Ref: FileQueue
    